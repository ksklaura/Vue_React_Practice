https://www.npmjs.com/

Vue 프로젝트 만드는 방법
  1. node 설치 (1번만!)
  2. @vue/cli 설치 (위치 무관) (1번만!)
     $ npm install --global @vue/cli
  3. vue 프로젝트 생성 (프로젝트 만들 때마다 해줘야 함.)
     $ npx vue create 프로젝트명
  4. node 모듈 재설치 (node_modules 폴더가 생성됨.) (node_modules가 있는 경우에만 서버 실행이 되기 때문에 다른 사람의 프로젝트를 받았을 경우 재설치하면 됨.)
     $ npm install

vue 단축키: (인스턴스 만들 떄)
- vueplugin : .html 파일 상에서 사용
- vuei      : .html 파일 상에서 사용
- vuefc     : .vue 파일에서 사용

디버깅시 자주 사용되는 단축키
- debugger
  F5:
  F8 : 점프
  F10 : 한줄씩
  F11:

builder의 목적: 컴파일

실행중인 서버 중지 : ctrl + c

변수 ==> data     <== v- (v-on 빼고), {{ }}, : 으로 시작하는 것들
함수 ==> methods  <== v-on, @ 로 시작하는 것들

위에서 아래로 처리하는 기술: 절차형 프로그래밍
변수와 함수를 묶어서 처리하는 기술: 객체지향 프로그래밍
함수를 묶어서 처리하는 기술: 함수형 프로그래밍 (map, reduce, filter)

메서드의 매개변수 확인 방법: ctrl + shift + space bar

지시자는 상태(데이터, 변수)를 화면에 붙일 때 사용함. (바인딩) :
  {{}} : 변수. 값을 화면에 바인딩
  v-if : 변수. boolean 타입의 변수를 만들 때 사용
  v-for : 변수. 배열 타입의 변수를 만들 때 사용 (JS의 for ~ in문과 동일)
  v-on : 함수. methods에 기술, 축약표현( @ 만 쓰는 경우엔 v-on과 같음.)
  v-bind : 변수. 축약표현( : )
  v-model : 변수. 입력 태그(input, textarea, select)

변수 === 데이터 === 상태 --> 불변객체
불변객체 처리 방법 / 복제 후 대입(재할당) :
  1. map, reduce, filter
  2. ... spread, 연산자
  3. 라이브러리: immer, immutable

v-bind  : 화면 <-- 데이터
v-model : 화면 <--> 데이터 (양방향) (화면에 입력한 값이 데이터에 저장되고 저장된 즉시 화면에 다시 값이 보여짐.)

문자형을 숫자형으로 변환하는 방법: Number()을 씌워줌.

CSS 표기법을 JS 표기법으로 변경하는 방법:
  1. 대문자  background-color ===> backgroundColor (대시 표기법에서 카멜 표기법으로)
  2. 문자열  yellow           ===> "yellow"
  3. 콤마    ;                ===> ,

  터미널에서 ls로 봤을 때 node_modules가 없는 경우 : npm install